var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { Property, Event, Component, Internationalization, extend } from '@syncfusion/ej2-base';
import { L10n, remove, addClass, Browser, Complex } from '@syncfusion/ej2-base';
import { NotifyPropertyChanges, removeClass, isNullOrUndefined } from '@syncfusion/ej2-base';
import { PivotEngine } from '../../base/engine';
import * as events from '../../common/base/constant';
import * as cls from '../../common/base/css-constant';
import { PivotCommon } from '../../common/base/pivot-common';
import { Render } from '../renderer/renderer';
import { DataSource } from '../../pivotview/model/dataSource';
import { createSpinner, showSpinner, hideSpinner } from '@syncfusion/ej2-popups';
import { PivotUtil } from '../../base/util';
/**
 * Represents the PivotFieldList component.
 * ```html
 * <div id="pivotfieldlist"></div>
 * <script>
 *  var pivotfieldlistObj = new PivotFieldList({ });
 *  pivotfieldlistObj.appendTo("#pivotfieldlist");
 * </script>
 * ```
 */
var PivotFieldList = /** @class */ (function (_super) {
    __extends(PivotFieldList, _super);
    /**
     * Constructor for creating the widget
     * @param  {PivotFieldListModel} options?
     * @param  {string|HTMLButtonElement} element?
     */
    function PivotFieldList(options, element) {
        var _this = _super.call(this, options, element) || this;
        /** @hidden */
        _this.isRequiredUpdate = true;
        /** @hidden */
        _this.lastSortInfo = {};
        /** @hidden */
        _this.lastFilterInfo = {};
        /** @hidden */
        _this.lastAggregationInfo = {};
        /** @hidden */
        _this.lastCalcFieldInfo = {};
        _this.engineModule = new PivotEngine();
        return _this;
    }
    /**
     * To provide the array of modules needed for control rendering
     * @return {ModuleDeclaration[]}
     * @hidden
     */
    PivotFieldList.prototype.requiredModules = function () {
        var modules = [];
        if (this.allowCalculatedField) {
            modules.push({ args: [this], member: 'calculatedfield' });
        }
        return modules;
    };
    /**
     * For internal use only - Initialize the event handler;
     * @private
     */
    PivotFieldList.prototype.preRender = function () {
        this.isAdaptive = Browser.isDevice;
        this.globalize = new Internationalization(this.locale);
        this.renderModule = new Render(this);
        this.defaultLocale = {
            staticFieldList: 'Pivot Field List',
            fieldList: 'Field List',
            dropFilterPrompt: 'Drop filter here',
            dropColPrompt: 'Drop column here',
            dropRowPrompt: 'Drop row here',
            dropValPrompt: 'Drop value here',
            addPrompt: 'Add field here',
            adaptiveFieldHeader: 'Choose field',
            centerHeader: 'Drag fields between axes below:',
            add: 'add',
            drag: 'Drag',
            filter: 'Filter',
            filtered: 'Filtered',
            sort: 'Sort',
            remove: 'Remove',
            filters: 'Filters',
            rows: 'Rows',
            columns: 'Columns',
            values: 'Values',
            calculatedField: 'Calculated Field',
            createCalculatedField: 'Create Calculated Field',
            fieldName: 'Enter the field name',
            error: 'Error',
            invalidFormula: 'Invalid formula.',
            dropText: 'Example: ("Sum(Order_Count)" + "Sum(In_Stock)") * 250',
            dropTextMobile: 'Add fields and edit formula here.',
            dropAction: 'Calculated field cannot be place in any other region except value axis.',
            search: 'Search',
            close: 'Close',
            cancel: 'Cancel',
            delete: 'Delete',
            alert: 'Alert',
            warning: 'Warning',
            ok: 'OK',
            sum: 'Sum',
            average: 'Average',
            count: 'Count',
            min: 'Min',
            max: 'Max',
            allFields: 'All Fields',
            formula: 'Formula',
            fieldExist: 'A field already exists in this name. Please enter a different name.',
            confirmText: 'A calculation field already exists in this name. Do you want to replace it?',
            noMatches: 'No matches',
            format: 'Summaries values by',
            edit: 'Edit',
            clear: 'Clear',
            formulaField: 'Drag and drop fields to formula',
            dragField: 'Drag field to formula',
            clearFilter: 'Clear',
            by: 'by',
            enterValue: 'Enter value',
            chooseDate: 'Enter date',
            all: 'All',
            multipleItems: 'Multiple items',
            /* tslint:disable */
            Equals: 'Equals',
            DoesNotEquals: 'Does Not Equal',
            BeginWith: 'Begins With',
            DoesNotBeginWith: 'Does Not Begin With',
            EndsWith: 'Ends With',
            DoesNotEndsWith: 'Does Not End With',
            Contains: 'Contains',
            DoesNotContains: 'Does Not Contain',
            GreaterThan: 'Greater Than',
            GreaterThanOrEqualTo: 'Greater Than Or Equal To',
            LessThan: 'Less Than',
            LessThanOrEqualTo: 'Less Than Or Equal To',
            Between: 'Between',
            NotBetween: 'Not Between',
            Before: 'Before',
            BeforeOrEqualTo: 'Before Or Equal To',
            After: 'After',
            AfterOrEqualTo: 'After Or Equal To',
            member: 'Member',
            label: 'Label',
            date: 'Date',
            value: 'Value',
            labelTextContent: 'Show the items for which the label',
            dateTextContent: 'Show the items for which the date',
            valueTextContent: 'Show the items for which',
            And: 'and',
            Sum: 'Sum',
            Count: 'Count',
            DistinctCount: 'Distinct Count',
            Product: 'Product',
            Avg: 'Avg',
            Min: 'Min',
            Max: 'Max',
            Index: 'Index',
            SampleStDev: 'Sample StDev',
            PopulationStDev: 'Population StDev',
            SampleVar: 'Sample Var',
            PopulationVar: 'Population Var',
            RunningTotals: 'Running Totals',
            DifferenceFrom: 'Difference From',
            PercentageOfDifferenceFrom: '% of Difference From',
            PercentageOfGrandTotal: '% of Grand Total',
            PercentageOfColumnTotal: '% of Column Total',
            PercentageOfRowTotal: '% of Row Total',
            PercentageOfParentTotal: '% of Parent Total',
            PercentageOfParentColumnTotal: '% of Parent Column Total',
            PercentageOfParentRowTotal: '% of Parent Row Total',
            Years: 'Years',
            Quarters: 'Quarters',
            Months: 'Months',
            Days: 'Days',
            Hours: 'Hours',
            Minutes: 'Minutes',
            Seconds: 'Seconds',
            /* tslint:enable */
            apply: 'APPLY',
            valueFieldSettings: 'Value field settings',
            sourceName: 'Field name :',
            sourceCaption: 'Field caption :',
            summarizeValuesBy: 'Summarize values by :',
            baseField: 'Base field :',
            baseItem: 'Base item :',
            example: 'e.g:',
            editorDataLimitMsg: ' more items. Search to refine further.',
            deferLayoutUpdate: 'Defer Layout Update',
            null: 'null',
            undefined: 'undefined',
            groupOutOfRange: 'Out of Range'
        };
        this.localeObj = new L10n(this.getModuleName(), this.defaultLocale, this.locale);
        this.isDragging = false;
        this.captionData = [];
        this.wireEvent();
    };
    PivotFieldList.prototype.frameCustomProperties = function () {
        var pageSettings = this.pivotGridModule ? this.pivotGridModule.pageSettings : undefined;
        var isDrillThrough = this.pivotGridModule ?
            (this.pivotGridModule.allowDrillThrough || this.pivotGridModule.editSettings.allowEditing) : true;
        var enableValueSorting = this.pivotGridModule ? this.pivotGridModule.enableValueSorting : undefined;
        var customProperties = {
            mode: '',
            savedFieldList: undefined,
            pageSettings: pageSettings,
            enableValueSorting: enableValueSorting,
            isDrillThrough: isDrillThrough,
            localeObj: this.localeObj
        };
        return customProperties;
    };
    /**
     * Initialize the control rendering
     * @returns void
     * @private
     */
    PivotFieldList.prototype.render = function () {
        this.trigger(events.load, { 'dataSource': this.dataSource });
        addClass([this.element], cls.ROOT);
        if (this.enableRtl) {
            addClass([this.element], cls.RTL);
        }
        else {
            removeClass([this.element], cls.RTL);
        }
        if (this.isAdaptive) {
            addClass([this.element], cls.DEVICE);
        }
        else {
            removeClass([this.element], cls.DEVICE);
        }
        if (this.cssClass) {
            addClass([this.element], this.cssClass);
        }
        this.notify(events.initialLoad, {});
    };
    /**
     * Binding events to the Pivot Field List element.
     * @hidden
     */
    PivotFieldList.prototype.wireEvent = function () {
        this.on(events.initialLoad, this.generateData, this);
        this.on(events.dataReady, this.fieldListRender, this);
    };
    /**
     * Unbinding events from the element on widget destroy.
     * @hidden
     */
    PivotFieldList.prototype.unWireEvent = function () {
        if (this.pivotGridModule && this.pivotGridModule.isDestroyed) {
            return;
        }
        this.off(events.initialLoad, this.generateData);
        this.off(events.dataReady, this.fieldListRender);
    };
    /**
     * Get the properties to be maintained in the persisted state.
     * @return {string}
     * @hidden
     */
    PivotFieldList.prototype.getPersistData = function () {
        var keyEntity = ['dataSource'];
        return this.addOnPersist(keyEntity);
    };
    /**
     * Get component name.
     * @returns string
     * @private
     */
    PivotFieldList.prototype.getModuleName = function () {
        return 'pivotfieldlist';
    };
    /**
     * Called internally if any of the property value changed.
     * @hidden
     */
    PivotFieldList.prototype.onPropertyChanged = function (newProp, oldProp) {
        var requireRefresh = false;
        for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
            var prop = _a[_i];
            switch (prop) {
                case 'locale':
                    this.refresh();
                    break;
                case 'enableRtl':
                    if (this.enableRtl) {
                        addClass([this.element], cls.RTL);
                    }
                    else {
                        removeClass([this.element], cls.RTL);
                    }
                    requireRefresh = true;
                    break;
            }
            if (requireRefresh) {
                this.fieldListRender();
            }
        }
    };
    /* tslint:disable */
    PivotFieldList.prototype.generateData = function () {
        this.pivotFieldList = {};
        if (this.dataSource && this.dataSource.data) {
            this.trigger(events.enginePopulating, { 'dataSource': this.dataSource });
            if (this.dataSource.groupSettings) {
                var pivotDataSet = this.dataSource.data;
                this.clonedDataSet = this.clonedDataSet ? this.clonedDataSet : PivotUtil.getClonedData(pivotDataSet);
                this.setProperties({ dataSource: { data: [] } }, true);
                this.clonedReport = this.clonedReport ? this.clonedReport : extend({}, this.dataSource, null, true);
                this.setProperties({ dataSource: { data: pivotDataSet } }, true);
            }
            this.engineModule.renderEngine(this.dataSource, this.frameCustomProperties(), this.getValueCellInfo.bind(this));
            this.pivotFieldList = this.engineModule.fieldList;
            var eventArgs = {
                pivotFieldList: this.pivotFieldList,
                pivotValues: this.engineModule.pivotValues
            };
            this.trigger(events.enginePopulated, eventArgs);
        }
        this.notify(events.dataReady, {});
        this.trigger(events.dataBound);
    };
    /* tslint:enable */
    PivotFieldList.prototype.getValueCellInfo = function (aggregateObj) {
        var args = aggregateObj;
        this.trigger(events.aggregateCellInfo, args);
        return args;
    };
    PivotFieldList.prototype.fieldListRender = function () {
        this.element.innerHTML = '';
        if (this.renderMode === 'Popup' && this.dialogRenderer.fieldListDialog && !this.dialogRenderer.fieldListDialog.isDestroyed) {
            this.dialogRenderer.fieldListDialog.destroy();
            remove(document.getElementById(this.element.id + '_Wrapper'));
        }
        this.renderModule.render();
        this.fieldListSpinnerElement = this.renderMode === 'Popup' ?
            this.dialogRenderer.fieldListDialog.element : this.element.querySelector('.e-pivotfieldlist-wrapper');
        createSpinner({ target: this.fieldListSpinnerElement }, this.createElement);
        var args = {
            pivotEngine: this.engineModule,
            dataSource: this.dataSource,
            id: this.element.id,
            element: document.getElementById(this.element.id + '_Wrapper'),
            moduleName: this.getModuleName(),
            enableRtl: this.enableRtl,
            isAdaptive: this.isAdaptive,
            renderMode: this.renderMode,
            localeObj: this.localeObj
        };
        this.pivotCommon = new PivotCommon(args);
        this.pivotCommon.control = this;
        if (this.allowDeferLayoutUpdate) {
            this.clonedDataSource = extend({}, this.dataSource, null, true);
            this.clonedFieldList = extend({}, this.pivotFieldList, null, true);
        }
    };
    PivotFieldList.prototype.getFieldCaption = function (dataSource) {
        this.getFields(dataSource);
        if (this.captionData.length > 0) {
            var lnt = this.captionData.length;
            while (lnt--) {
                if (this.captionData[lnt]) {
                    for (var _i = 0, _a = this.captionData[lnt]; _i < _a.length; _i++) {
                        var obj = _a[_i];
                        if (obj) {
                            if (this.engineModule.fieldList[obj.name] && obj.caption) {
                                this.engineModule.fieldList[obj.name].caption = obj.caption;
                            }
                            else {
                                this.engineModule.fieldList[obj.name].caption = obj.name;
                            }
                        }
                    }
                }
            }
        }
        else {
            return;
        }
    };
    PivotFieldList.prototype.getFields = function (dataSource) {
        this.captionData = [dataSource.rows, dataSource.columns, dataSource.values, dataSource.filters];
    };
    /**
     * Updates the PivotEngine using dataSource from Pivot Field List component.
     * @method updateDataSource
     * @return {void}
     * @hidden
     */
    PivotFieldList.prototype.updateDataSource = function (isTreeViewRefresh, isEngineRefresh) {
        if (this.pivotGridModule) {
            showSpinner(this.pivotGridModule.element);
        }
        showSpinner(this.fieldListSpinnerElement);
        if (isNullOrUndefined(isEngineRefresh)) {
            var pageSettings = this.pivotGridModule ? this.pivotGridModule.pageSettings : undefined;
            var customProperties = this.frameCustomProperties();
            customProperties.savedFieldList = this.pivotFieldList;
            var lastSortInfo = this.pivotGridModule ? this.pivotGridModule.lastSortInfo : this.lastSortInfo;
            if (this.pivotGridModule) {
                this.pivotGridModule.lastSortInfo = {};
            }
            this.lastSortInfo = {};
            var isAggChange = Object.keys(this.lastAggregationInfo).length > 0 ? true : false;
            var isCalcChange = Object.keys(this.lastCalcFieldInfo).length > 0 ? true : false;
            var isSorted = Object.keys(lastSortInfo).length > 0 ? true : false;
            var isFiltered = Object.keys(this.lastFilterInfo).length > 0 ? true : false;
            if (pageSettings && (isSorted || isFiltered || isAggChange || isCalcChange)) {
                if (isSorted) {
                    this.pivotGridModule.setProperties({ dataSource: { valueSortSettings: { headerText: '' } } }, true);
                    this.engineModule.onSort(lastSortInfo);
                }
                if (isFiltered) {
                    this.engineModule.onFilter(this.lastFilterInfo, this.dataSource);
                    this.lastFilterInfo = {};
                }
                if (isAggChange) {
                    this.engineModule.onAggregation(this.lastAggregationInfo);
                    this.lastAggregationInfo = {};
                }
                if (isCalcChange) {
                    this.engineModule.onCalcOperation(this.lastCalcFieldInfo);
                    this.lastCalcFieldInfo = {};
                }
            }
            else {
                this.engineModule.renderEngine(this.dataSource, customProperties, this.getValueCellInfo.bind(this));
            }
            this.getFieldCaption(this.dataSource);
        }
        else {
            this.axisFieldModule.render();
            this.isRequiredUpdate = false;
        }
        var eventArgs = {
            dataSource: this.dataSource,
            pivotFieldList: this.pivotFieldList,
            pivotValues: this.engineModule.pivotValues
        };
        this.trigger(events.enginePopulated, eventArgs);
        this.pivotCommon.engineModule = this.engineModule;
        this.pivotCommon.dataSource = this.dataSource;
        this.pivotFieldList = this.engineModule.fieldList;
        if (!isTreeViewRefresh && this.treeViewModule.fieldTable && !this.isAdaptive) {
            this.notify(events.treeViewUpdate, {});
        }
        if (this.isRequiredUpdate) {
            if (this.allowDeferLayoutUpdate) {
                this.clonedDataSource = extend({}, this.dataSource, null, true);
                this.clonedFieldList = extend({}, this.pivotFieldList, null, true);
            }
            this.updateView(this.pivotGridModule);
        }
        else if (this.renderMode === 'Popup' && this.allowDeferLayoutUpdate) {
            this.pivotGridModule.engineModule = this.engineModule;
            this.pivotGridModule.
                setProperties({ dataSource: this.dataSource.properties }, true);
            this.pivotGridModule.notify(events.uiUpdate, this);
            hideSpinner(this.fieldListSpinnerElement);
        }
        this.isRequiredUpdate = true;
        if (!this.pivotGridModule) {
            hideSpinner(this.fieldListSpinnerElement);
        }
        else {
            this.pivotGridModule.fieldListSpinnerElement = this.fieldListSpinnerElement;
        }
    };
    /**
     * Updates the Pivot Field List component using dataSource from PivotView component.
     * @method updateControl
     * @return {void}
     * @hidden
     */
    PivotFieldList.prototype.update = function (control) {
        if (control) {
            this.clonedDataSet = control.clonedDataSet;
            this.setProperties({ dataSource: control.dataSource }, true);
            this.engineModule = control.engineModule;
            this.pivotFieldList = control.engineModule.fieldList;
            if (this.renderMode === 'Popup') {
                this.pivotGridModule = control;
            }
            this.getFieldCaption(control.dataSource);
            this.pivotCommon.engineModule = this.engineModule;
            this.pivotCommon.dataSource = this.dataSource;
            this.pivotCommon.control = control;
            if (this.treeViewModule.fieldTable && !this.isAdaptive) {
                this.notify(events.treeViewUpdate, {});
            }
            this.axisFieldModule.render();
            if (this.renderMode === 'Fixed' && this.allowDeferLayoutUpdate) {
                this.clonedDataSource = extend({}, this.dataSource, null, true);
                this.clonedFieldList = extend({}, this.pivotFieldList, null, true);
            }
        }
    };
    /**
     * Updates the PivotView component using dataSource from Pivot Field List component.
     * @method refreshTargetControl
     * @return {void}
     * @hidden
     */
    PivotFieldList.prototype.updateView = function (control) {
        if (control) {
            control.clonedDataSet = this.clonedDataSet;
            control.setProperties({ dataSource: this.dataSource }, true);
            control.engineModule = this.engineModule;
            control.pivotValues = this.engineModule.pivotValues;
            control.dataBind();
        }
    };
    /**
     * Called internally to trigger populate event.
     * @hidden
     */
    PivotFieldList.prototype.triggerPopulateEvent = function () {
        var eventArgs = {
            dataSource: this.dataSource,
            pivotFieldList: this.pivotFieldList,
            pivotValues: this.engineModule.pivotValues
        };
        this.trigger(events.enginePopulated, eventArgs);
    };
    /**
     * Destroys the Field Table component.
     * @method destroy
     * @return {void}
     */
    PivotFieldList.prototype.destroy = function () {
        this.unWireEvent();
        if (this.treeViewModule) {
            this.treeViewModule.destroy();
        }
        if (this.pivotButtonModule) {
            this.pivotButtonModule.destroy();
        }
        if (this.allowDeferLayoutUpdate && this.dialogRenderer &&
            this.dialogRenderer.deferUpdateCheckBox && !this.dialogRenderer.deferUpdateCheckBox.isDestroyed) {
            this.dialogRenderer.deferUpdateCheckBox.destroy();
        }
        _super.prototype.destroy.call(this);
        this.element.innerHTML = '';
        removeClass([this.element], cls.ROOT);
        removeClass([this.element], cls.RTL);
        removeClass([this.element], cls.DEVICE);
        if (this.renderMode === 'Popup') {
            if (this.dialogRenderer.fieldListDialog && !this.dialogRenderer.fieldListDialog.isDestroyed) {
                this.dialogRenderer.fieldListDialog.destroy();
            }
            if (document.getElementById(this.element.id + '_Wrapper')) {
                remove(document.getElementById(this.element.id + '_Wrapper'));
            }
        }
    };
    __decorate([
        Complex({}, DataSource)
    ], PivotFieldList.prototype, "dataSource", void 0);
    __decorate([
        Property('Popup')
    ], PivotFieldList.prototype, "renderMode", void 0);
    __decorate([
        Property()
    ], PivotFieldList.prototype, "target", void 0);
    __decorate([
        Property('')
    ], PivotFieldList.prototype, "cssClass", void 0);
    __decorate([
        Property(false)
    ], PivotFieldList.prototype, "allowCalculatedField", void 0);
    __decorate([
        Property(false)
    ], PivotFieldList.prototype, "showValuesButton", void 0);
    __decorate([
        Property(false)
    ], PivotFieldList.prototype, "allowDeferLayoutUpdate", void 0);
    __decorate([
        Property(1000)
    ], PivotFieldList.prototype, "maxNodeLimitInMemberEditor", void 0);
    __decorate([
        Event()
    ], PivotFieldList.prototype, "load", void 0);
    __decorate([
        Event()
    ], PivotFieldList.prototype, "enginePopulating", void 0);
    __decorate([
        Event()
    ], PivotFieldList.prototype, "enginePopulated", void 0);
    __decorate([
        Event()
    ], PivotFieldList.prototype, "onFieldDropped", void 0);
    __decorate([
        Event()
    ], PivotFieldList.prototype, "aggregateCellInfo", void 0);
    __decorate([
        Event()
    ], PivotFieldList.prototype, "dataBound", void 0);
    __decorate([
        Event()
    ], PivotFieldList.prototype, "created", void 0);
    __decorate([
        Event()
    ], PivotFieldList.prototype, "destroyed", void 0);
    PivotFieldList = __decorate([
        NotifyPropertyChanges
    ], PivotFieldList);
    return PivotFieldList;
}(Component));
export { PivotFieldList };
