import { ListBase } from '@syncfusion/ej2-lists';
import { createElement, select, selectAll, EventHandler, KeyboardEvents, closest } from '@syncfusion/ej2-base';
import { isNullOrUndefined as isNOU, addClass, removeClass, Touch, isVisible } from '@syncfusion/ej2-base';
import { getValue, setValue, remove } from '@syncfusion/ej2-base';
import * as events from '../base/constant';
import * as CLS from '../base/classes';
import { createCheckBox } from '@syncfusion/ej2-buttons';
import { read } from '../common/operations';
import { removeBlur, cutFiles, copyFiles, addBlur, openSearchFolder } from '../common/index';
import { openAction, fileType, refresh, getImageUrl, getSortedData } from '../common/utility';
import { createEmptyElement } from '../common/utility';
import { createDialog, createImageDialog } from '../pop-up/dialog';
/**
 * LargeIcons module
 */
var LargeIconsView = /** @class */ (function () {
    /**
     * Constructor for the LargeIcons module
     * @hidden
     */
    function LargeIconsView(parent) {
        this.pasteOperation = false;
        this.uploadOperation = false;
        this.count = 0;
        this.isRendered = true;
        this.tapCount = 0;
        this.isSetModel = false;
        this.parent = parent;
        this.element = select('#' + this.parent.element.id + CLS.LARGEICON_ID, this.parent.element);
        addClass([this.element], CLS.LARGE_ICONS);
        this.addEventListener();
        this.keyConfigs = {
            end: 'end',
            home: 'home',
            tab: 'tab',
            moveDown: 'downarrow',
            moveLeft: 'leftarrow',
            moveRight: 'rightarrow',
            moveUp: 'uparrow',
            ctrlEnd: 'ctrl+end',
            ctrlHome: 'ctrl+home',
            ctrlDown: 'ctrl+downarrow',
            ctrlLeft: 'ctrl+leftarrow',
            ctrlRight: 'ctrl+rightarrow',
            ctrlUp: 'ctrl+uparrow',
            shiftEnd: 'shift+end',
            shiftHome: 'shift+home',
            shiftDown: 'shift+downarrow',
            shiftLeft: 'shift+leftarrow',
            shiftRight: 'shift+rightarrow',
            shiftUp: 'shift+uparrow',
            csEnd: 'ctrl+shift+end',
            csHome: 'ctrl+shift+home',
            csDown: 'ctrl+shift+downarrow',
            csLeft: 'ctrl+shift+leftarrow',
            csRight: 'ctrl+shift+rightarrow',
            csUp: 'ctrl+shift+uparrow',
            space: 'space',
            ctrlSpace: 'ctrl+space',
            shiftSpace: 'shift+space',
            csSpace: 'ctrl+shift+space',
            ctrlA: 'ctrl+a',
            enter: 'enter',
            altEnter: 'alt+enter',
            esc: 'escape',
            del: 'delete',
            ctrlX: 'ctrl+x',
            ctrlC: 'ctrl+c',
            ctrlV: 'ctrl+v',
            f2: 'f2',
            shiftdel: 'shift+delete',
            back: 'backspace'
        };
    }
    LargeIconsView.prototype.render = function (args) {
        this.element.setAttribute('tabindex', '0');
        this.parent.visitedItem = null;
        this.startItem = null;
        if (this.parent.view === 'LargeIcons') {
            this.resetMultiSelect();
            if (this.listObj) {
                this.unWireEvents();
                this.removeEventListener();
            }
            this.parent.notify(events.hideLayout, {});
            var iconsView = select('#' + this.parent.element.id + CLS.LARGEICON_ID, this.parent.element);
            var ul = select('ul', iconsView);
            if (ul) {
                remove(ul);
            }
            this.listObj = {
                ariaAttributes: {
                    itemRole: '', listRole: '', itemText: '',
                    groupItemRole: 'group', wrapperRole: 'presentation'
                },
                showIcon: true,
                fields: { text: 'name', iconCss: 'icon', imageUrl: 'imageUrl' },
                sortOrder: this.parent.sortOrder,
                itemCreated: this.onItemCreated.bind(this),
            };
            this.items = [];
            this.items = this.renderList(args);
            this.items = getSortedData(this.parent, this.items);
            this.listElements = ListBase.createListFromJson(createElement, this.items, this.listObj);
            this.itemList = Array.prototype.slice.call(selectAll('.' + CLS.LIST_ITEM, this.listElements));
            this.element.appendChild(this.listElements);
            if (this.itemList.length === 0) {
                var emptyList = this.element.querySelector('.' + CLS.LIST_PARENT);
                this.element.removeChild(emptyList);
                createEmptyElement(this.parent, getValue('name', args), this.element);
            }
            else if (this.itemList.length !== 0 && this.element.querySelector('.' + CLS.EMPTY)) {
                this.element.removeChild(this.element.querySelector('.' + CLS.EMPTY));
            }
            if (this.pasteOperation === true) {
                this.selectItems(args.files, this.parent.selectedNodes);
                this.parent.setProperties({ selectedItems: [] }, true);
                this.pasteOperation = false;
            }
            if (this.uploadOperation === true) {
                this.selectItems(args.files, this.parent.uploadItem);
                this.parent.setProperties({ selectedItems: [] }, true);
                this.count++;
                if (this.count === this.parent.uploadItem.length) {
                    this.uploadOperation = false;
                    this.parent.uploadItem = [];
                }
            }
            var activeEle = this.element.querySelectorAll('.' + CLS.ACTIVE);
            if (activeEle.length !== 0) {
                this.parent.activeModule = 'largeiconsview';
            }
            iconsView.classList.remove(CLS.DISPLAY_NONE);
            this.adjustHeight();
            this.element.style.maxHeight = '100%';
            this.getItemCount();
            this.addEventListener();
            this.wireEvents();
            this.isRendered = true;
            if (this.parent.selectedItems.length) {
                this.checkItem();
            }
        }
    };
    /**
     * For internal use only - Get the module name.
     * @private
     */
    LargeIconsView.prototype.getModuleName = function () {
        return 'largeiconsview';
    };
    LargeIconsView.prototype.adjustHeight = function () {
        var pane = select('#' + this.parent.element.id + CLS.CONTENT_ID, this.parent.element);
        var bar = select('#' + this.parent.element.id + CLS.BREADCRUMBBAR_ID, this.parent.element);
        this.element.style.height = (pane.offsetHeight - bar.offsetHeight) + 'px';
    };
    LargeIconsView.prototype.onItemCreated = function (args) {
        if (!this.parent.showFileExtension && getValue('isFile', args.curData)) {
            var textEle = args.item.querySelector('.' + CLS.LIST_TEXT);
            var txt = getValue('name', args.curData);
            var type = getValue('type', args.curData);
            textEle.innerHTML = txt.substr(0, txt.length - type.length);
        }
        this.renderCheckbox(args);
        var eventArgs = {
            element: args.item,
            fileDetails: args.curData,
            module: 'LargeIconsView'
        };
        this.parent.trigger('beforeFileLoad', eventArgs);
    };
    LargeIconsView.prototype.renderCheckbox = function (args) {
        if (!this.parent.allowMultiSelection) {
            return;
        }
        var checkElement;
        checkElement = createCheckBox(createElement, false, {
            checked: false,
            cssClass: 'e-small'
        });
        checkElement.setAttribute('role', 'checkbox');
        checkElement.setAttribute('aria-checked', 'false');
        args.item.firstElementChild.insertBefore(checkElement, args.item.firstElementChild.childNodes[0]);
    };
    LargeIconsView.prototype.onLayoutChange = function (args) {
        if (this.parent.view === 'LargeIcons') {
            this.destroy();
            this.render(args);
            /* istanbul ignore next */
            if (this.parent.cutNodes && this.parent.cutNodes.length !== 0) {
                var indexes = this.getIndexes(args.files, this.parent.selectedNodes);
                var length_1 = 0;
                while (length_1 < indexes.length) {
                    addBlur(this.itemList[indexes[length_1]]);
                    length_1++;
                }
            }
            var activeEle = this.element.querySelectorAll('.' + CLS.ACTIVE);
            this.parent.activeElements = (activeEle.length !== 0) ? activeEle : this.parent.activeElements;
            if (activeEle.length !== 0) {
                this.element.focus();
            }
            this.checkItem();
        }
        else {
            this.element.setAttribute('tabindex', '-1');
        }
    };
    LargeIconsView.prototype.checkItem = function () {
        var checkEle = this.element.querySelectorAll('.' + CLS.ACTIVE);
        if (checkEle) {
            var checkLength = 0;
            while (checkLength < checkEle.length) {
                this.checkState(checkEle[checkLength], true);
                checkLength++;
            }
        }
    };
    LargeIconsView.prototype.renderList = function (args) {
        var i = 0;
        var items = JSON.parse(JSON.stringify(args.files));
        while (i < items.length) {
            var icon = fileType(items[i]);
            /* istanbul ignore next */
            var pasteNodes = this.parent.pasteNodes;
            var className = ((this.parent.selectedItems &&
                this.parent.selectedItems.indexOf(getValue('name', args.files[i])) !== -1) ||
                (pasteNodes && pasteNodes.length !== 0 && pasteNodes.indexOf(getValue('name', args.files[i])) !== -1)) ?
                CLS.LARGE_ICON + ' e-active' : CLS.LARGE_ICON;
            if (icon === CLS.ICON_IMAGE && this.parent.showThumbnail) {
                var imgUrl = getImageUrl(this.parent, items[i]);
                setValue('imageUrl', imgUrl, items[i]);
            }
            else {
                setValue('icon', icon, items[i]);
            }
            setValue('htmlAttributes', { class: className, title: getValue('name', args.files[i]) }, items[i]);
            i++;
        }
        return items;
    };
    LargeIconsView.prototype.onFinalizeEnd = function (args) {
        this.render(args);
        this.parent.notify(events.searchTextChange, args);
    };
    LargeIconsView.prototype.onCreateEnd = function (args) {
        if (this.parent.view !== 'LargeIcons') {
            return;
        }
        this.onLayoutChange(args);
        this.clearSelect();
        this.selectItems(args.files, [getValue('name', this.parent.createdItem)]);
        this.parent.createdItem = null;
        this.parent.largeiconsviewModule.element.focus();
        this.parent.persistData = false;
    };
    /* istanbul ignore next */
    LargeIconsView.prototype.onDeleteEnd = function (args) {
        if (this.parent.view !== 'LargeIcons') {
            return;
        }
        this.onLayoutChange(args);
        this.parent.setProperties({ selectedItems: [] }, true);
        this.clearSelect();
    };
    LargeIconsView.prototype.onRefreshEnd = function (args) {
        if (this.parent.view !== 'LargeIcons') {
            return;
        }
        this.onLayoutChange(args);
    };
    LargeIconsView.prototype.onRenameInit = function () {
        if (this.parent.view === 'LargeIcons' && this.parent.selectedItems.length === 1) {
            this.updateRenameData();
        }
    };
    LargeIconsView.prototype.onRenameEnd = function (args) {
        if (this.parent.view !== 'LargeIcons') {
            return;
        }
        this.onLayoutChange(args);
        this.clearSelect();
        this.parent.setProperties({ selectedItems: [] }, true);
        this.selectItems(args.files, [getValue('name', this.parent.renamedItem)]);
        this.parent.renamedItem = null;
    };
    LargeIconsView.prototype.onPathChanged = function (args) {
        /* istanbul ignore next */
        if (this.parent.breadcrumbbarModule.searchObj.value && this.parent.breadcrumbbarModule.searchObj.value === '') {
            this.parent.searchedItems = [];
        }
        if (this.parent.view === 'LargeIcons') {
            removeBlur(this.parent);
            if (!this.parent.persistData) {
                this.parent.selectedItems = [];
            }
            this.parent.persistData = false;
            this.parent.pasteNodes = [];
            this.parent.cutNodes = [];
            this.onLayoutChange(args);
            this.parent.notify(events.searchTextChange, args);
        }
    };
    LargeIconsView.prototype.onOpenInit = function (args) {
        if (this.parent.activeModule === 'largeiconsview') {
            this.doOpenAction(args.target);
        }
    };
    LargeIconsView.prototype.onHideLayout = function (args) {
        if (this.parent.view !== 'LargeIcons' && this.element) {
            this.element.classList.add(CLS.DISPLAY_NONE);
        }
    };
    LargeIconsView.prototype.onSelectAllInit = function () {
        if (this.parent.view === 'LargeIcons') {
            this.startItem = this.getFirstItem();
            var lastItem = this.getLastItem();
            var eveArgs = { ctrlKey: true, shiftKey: true };
            this.doSelection(lastItem, eveArgs);
        }
    };
    LargeIconsView.prototype.onClearAllInit = function () {
        if (this.parent.view === 'LargeIcons') {
            this.clearSelection();
        }
    };
    LargeIconsView.prototype.onBeforeRequest = function () {
        this.isRendered = false;
    };
    LargeIconsView.prototype.onAfterRequest = function (args) {
        this.isRendered = true;
    };
    /* istanbul ignore next */
    LargeIconsView.prototype.onSearch = function (args) {
        this.parent.searchedItems = args.files;
        this.onLayoutChange(args);
    };
    LargeIconsView.prototype.removeEventListener = function () {
        if (this.parent.isDestroyed) {
            return;
        }
        this.parent.off(events.finalizeEnd, this.onFinalizeEnd);
        this.parent.off(events.createEnd, this.onCreateEnd);
        this.parent.off(events.deleteEnd, this.onDeleteEnd);
        this.parent.off(events.refreshEnd, this.onRefreshEnd);
        this.parent.off(events.pathChanged, this.onPathChanged);
        this.parent.off(events.layoutChange, this.onLayoutChange);
        this.parent.off(events.search, this.onSearch);
        this.parent.off(events.openInit, this.onOpenInit);
        this.parent.off(events.openEnd, this.onLayoutChange);
        this.parent.off(events.modelChanged, this.onPropertyChanged);
        this.parent.off(events.renameInit, this.onRenameInit);
        this.parent.off(events.renameEnd, this.onRenameEnd);
        this.parent.off(events.hideLayout, this.onHideLayout);
        this.parent.off(events.selectAllInit, this.onSelectAllInit);
        this.parent.off(events.clearAllInit, this.onClearAllInit);
        this.parent.off(events.beforeRequest, this.onBeforeRequest);
        this.parent.off(events.afterRequest, this.onAfterRequest);
        this.parent.off(events.splitterResize, this.resizeHandler);
        this.parent.off(events.resizeEnd, this.resizeHandler);
    };
    LargeIconsView.prototype.addEventListener = function () {
        this.parent.on(events.finalizeEnd, this.onFinalizeEnd, this);
        this.parent.on(events.createEnd, this.onCreateEnd, this);
        this.parent.on(events.deleteEnd, this.onDeleteEnd, this);
        this.parent.on(events.refreshEnd, this.onRefreshEnd, this);
        this.parent.on(events.pathChanged, this.onPathChanged, this);
        this.parent.on(events.layoutChange, this.onLayoutChange, this);
        this.parent.on(events.search, this.onSearch, this);
        this.parent.on(events.openInit, this.onOpenInit, this);
        this.parent.on(events.renameInit, this.onRenameInit, this);
        this.parent.on(events.renameEnd, this.onRenameEnd, this);
        this.parent.on(events.openEnd, this.onLayoutChange, this);
        this.parent.on(events.modelChanged, this.onPropertyChanged, this);
        this.parent.on(events.hideLayout, this.onHideLayout, this);
        this.parent.on(events.selectAllInit, this.onSelectAllInit, this);
        this.parent.on(events.clearAllInit, this.onClearAllInit, this);
        this.parent.on(events.beforeRequest, this.onBeforeRequest, this);
        this.parent.on(events.afterRequest, this.onAfterRequest, this);
        this.parent.on(events.splitterResize, this.resizeHandler, this);
        this.parent.on(events.resizeEnd, this.resizeHandler, this);
    };
    LargeIconsView.prototype.onPropertyChanged = function (e) {
        if (e.module !== this.getModuleName() && e.module !== 'common') {
            return;
        }
        for (var _i = 0, _a = Object.keys(e.newProp); _i < _a.length; _i++) {
            var prop = _a[_i];
            switch (prop) {
                case 'height':
                    this.adjustHeight();
                    break;
                case 'selectedItems':
                    this.isSetModel = true;
                    if (this.parent.selectedItems.length !== 0) {
                        var currentDataSource = getValue(this.parent.path, this.parent.feFiles);
                        this.selectItems(currentDataSource, this.parent.selectedItems);
                    }
                    else {
                        while (this.element.querySelectorAll('.' + CLS.ACTIVE).length > 0) {
                            this.removeActive(this.element.querySelectorAll('.' + CLS.ACTIVE)[0]);
                        }
                    }
                    this.isSetModel = false;
                    break;
                case 'showThumbnail':
                    refresh(this.parent);
                    break;
                case 'showFileExtension':
                    read(this.parent, events.pathChanged, this.parent.path);
                    break;
                case 'showHiddenItems':
                    read(this.parent, events.pathChanged, this.parent.path);
                    break;
                case 'allowMultiSelection':
                    refresh(this.parent);
                    if (this.parent.selectedItems.length > 1 && !this.parent.allowMultiSelection) {
                        this.parent.selectedItems = [];
                    }
                    break;
                case 'view':
                    read(this.parent, events.layoutChange, this.parent.path);
                    break;
            }
        }
    };
    /**
     * Destroys the LargeIcons module.
     * @method destroy
     * @return {void}
     */
    LargeIconsView.prototype.destroy = function () {
        if (this.parent.isDestroyed) {
            return;
        }
        this.removeEventListener();
        if (this.listObj) {
            this.unWireEvents();
        }
    };
    LargeIconsView.prototype.wireEvents = function () {
        this.wireClickEvent(true);
        this.keyboardModule = new KeyboardEvents(this.element, {
            keyAction: this.keyActionHandler.bind(this),
            keyConfigs: this.keyConfigs,
            eventName: 'keyup',
        });
        this.keyboardDownModule = new KeyboardEvents(this.element, {
            keyAction: this.keydownActionHandler.bind(this),
            keyConfigs: this.keyConfigs,
            eventName: 'keydown',
        });
        EventHandler.add(this.element, 'mouseover', this.onMouseOver, this);
    };
    LargeIconsView.prototype.unWireEvents = function () {
        this.wireClickEvent(false);
        EventHandler.remove(this.element, 'mouseover', this.onMouseOver);
        this.keyboardModule.destroy();
        this.keyboardDownModule.destroy();
    };
    /* istanbul ignore next */
    LargeIconsView.prototype.onMouseOver = function (e) {
        var targetEle = closest(e.target, '.e-list-item');
        removeBlur(this.parent, 'hover');
        if (targetEle !== null) {
            targetEle.classList.add(CLS.HOVER);
        }
    };
    LargeIconsView.prototype.wireClickEvent = function (toBind) {
        if (toBind) {
            var proxy_1 = this;
            this.clickObj = new Touch(this.element, {
                tap: function (eve) {
                    eve.originalEvent.preventDefault();
                    if (proxy_1.parent.isDevice) {
                        proxy_1.tapCount = eve.tapCount;
                        proxy_1.tapEvent = eve;
                        setTimeout(function () {
                            if (proxy_1.tapCount > 0) {
                                proxy_1.doTapAction(proxy_1.tapEvent);
                            }
                            proxy_1.tapCount = 0;
                        }, 350);
                    }
                    else {
                        if (eve.tapCount === 2 && eve.originalEvent.which !== 3) {
                            proxy_1.dblClickHandler(eve);
                        }
                        else {
                            proxy_1.clickHandler(eve);
                        }
                    }
                },
                tapHold: function (e) {
                    if (proxy_1.parent.isDevice) {
                        proxy_1.multiSelect = proxy_1.parent.allowMultiSelection ? true : false;
                        if (proxy_1.parent.allowMultiSelection) {
                            addClass([proxy_1.parent.element], CLS.MULTI_SELECT);
                        }
                        proxy_1.clickHandler(e);
                    }
                }
            });
        }
        else {
            if (this.clickObj) {
                this.clickObj.destroy();
            }
        }
    };
    LargeIconsView.prototype.doTapAction = function (eve) {
        var target = eve.originalEvent.target;
        var item = closest(target, '.' + CLS.LIST_ITEM);
        if (this.multiSelect || target.classList.contains(CLS.LIST_PARENT) || isNOU(item)) {
            this.clickHandler(eve);
        }
        else {
            this.parent.isFile = false;
            this.updateType(item);
            if (!this.parent.isFile) {
                this.dblClickHandler(eve);
            }
            else if (eve.tapCount === 2) {
                this.clickHandler(eve);
                this.dblClickHandler(eve);
            }
            else {
                this.clickHandler(eve);
            }
        }
    };
    LargeIconsView.prototype.clickHandler = function (e) {
        var target = e.originalEvent.target;
        removeBlur(this.parent, 'hover');
        this.doSelection(target, e.originalEvent);
        this.parent.activeModule = 'largeiconsview';
    };
    /** @hidden */
    LargeIconsView.prototype.doSelection = function (target, e) {
        var item = closest(target, '.' + CLS.LIST_ITEM);
        var fItem = this.getFocusedItem();
        var cList = target.classList;
        this.parent.isFile = false;
        var action = 'select';
        if (e.which === 3 && !isNOU(item) && item.classList.contains(CLS.ACTIVE)) {
            this.updateType(item);
            return;
        }
        else if (!isNOU(item)) {
            if ((!this.parent.allowMultiSelection || (!this.multiSelect && (e && !e.ctrlKey)))
                && !cList.contains(CLS.FRAME)) {
                this.updateType(item);
                this.clearSelect();
            }
            if (this.parent.allowMultiSelection && e.shiftKey) {
                if (!(e && e.ctrlKey)) {
                    this.clearSelect();
                }
                if (!this.startItem) {
                    this.startItem = item;
                }
                var startIndex = this.itemList.indexOf(this.startItem);
                var endIndex = this.itemList.indexOf(item);
                if (startIndex > endIndex) {
                    for (var i = startIndex; i >= endIndex; i--) {
                        this.addActive(this.itemList[i]);
                    }
                }
                else {
                    for (var i = startIndex; i <= endIndex; i++) {
                        this.addActive(this.itemList[i]);
                    }
                }
                this.addFocus(this.itemList[endIndex]);
            }
            else {
                this.startItem = item;
                if (this.parent.allowMultiSelection && item.classList.contains(CLS.ACTIVE)) {
                    this.removeActive(item);
                    action = 'unselect';
                }
                else {
                    this.addActive(item);
                }
                this.addFocus(item);
            }
            if (this.parent.selectedItems.length === 0) {
                this.resetMultiSelect();
            }
            this.parent.notify(events.selectionChanged, {});
            this.triggerSelect(action, item);
        }
        else {
            this.clearSelection();
        }
        this.parent.activeElements = this.element.querySelectorAll('.e-active');
    };
    LargeIconsView.prototype.dblClickHandler = function (e) {
        this.parent.activeModule = 'largeiconsview';
        var target = e.originalEvent.target;
        this.doOpenAction(target);
    };
    LargeIconsView.prototype.clearSelection = function () {
        this.clearSelect();
        this.resetMultiSelect();
        this.parent.notify(events.selectionChanged, {});
    };
    LargeIconsView.prototype.resetMultiSelect = function () {
        this.multiSelect = false;
        removeClass([this.parent.element], CLS.MULTI_SELECT);
    };
    LargeIconsView.prototype.doOpenAction = function (target) {
        if (isNOU(target)) {
            return;
        }
        var item = closest(target, '.' + CLS.LIST_ITEM);
        this.parent.isFile = false;
        if (!isNOU(item)) {
            this.updateType(item);
            var details = this.getItemObject(item);
            var eventArgs = { cancel: false, fileDetails: details };
            this.parent.trigger('beforeFileOpen', eventArgs);
            if (eventArgs.cancel) {
                return;
            }
            var text = select('.' + CLS.LIST_TEXT, item).textContent;
            if (!this.parent.isFile) {
                var val = this.parent.breadcrumbbarModule.searchObj.element.value;
                if (val === '') {
                    var newPath = this.parent.path + text + '/';
                    this.parent.setProperties({ path: newPath }, true);
                    this.parent.pathId.push(getValue('nodeId', details));
                    this.parent.itemData = [details];
                    openAction(this.parent);
                }
                else {
                    openSearchFolder(this.parent, details);
                }
                this.parent.setProperties({ selectedItems: [] }, true);
            }
            else {
                var icon = fileType(details);
                if (icon === CLS.ICON_IMAGE) {
                    var imgUrl = getImageUrl(this.parent, details);
                    createImageDialog(this.parent, getValue('name', details), imgUrl);
                }
            }
        }
    };
    LargeIconsView.prototype.updateType = function (item) {
        var folder = select('.' + CLS.FOLDER, item);
        this.parent.isFile = isNOU(folder) ? true : false;
    };
    /* istanbul ignore next */
    // tslint:disable-next-line:max-func-body-length
    LargeIconsView.prototype.keydownActionHandler = function (e) {
        if (!this.isRendered) {
            return;
        }
        switch (e.action) {
            case 'end':
            case 'home':
            case 'moveDown':
            case 'moveLeft':
            case 'moveRight':
            case 'moveUp':
            case 'ctrlEnd':
            case 'shiftEnd':
            case 'csEnd':
            case 'ctrlHome':
            case 'shiftHome':
            case 'csHome':
            case 'ctrlDown':
            case 'shiftDown':
            case 'csDown':
            case 'ctrlLeft':
            case 'shiftLeft':
            case 'csLeft':
            case 'ctrlRight':
            case 'shiftRight':
            case 'csRight':
            case 'space':
            case 'ctrlSpace':
            case 'shiftSpace':
            case 'csSpace':
            case 'ctrlA':
            case 'enter':
            case 'altEnter':
            case 'esc':
            case 'del':
            case 'shiftdel':
            case 'ctrlC':
            case 'ctrlV':
            case 'ctrlX':
            case 'f2':
                e.preventDefault();
                break;
            default:
                break;
        }
    };
    /* istanbul ignore next */
    // tslint:disable-next-line:max-func-body-length
    LargeIconsView.prototype.keyActionHandler = function (e) {
        if (!this.isRendered) {
            return;
        }
        var fItem = this.getFocusedItem();
        var firstItem = this.getFirstItem();
        var lastItem = this.getLastItem();
        switch (e.action) {
            case 'end':
                this.navigateItem(lastItem);
                break;
            case 'home':
                this.navigateItem(firstItem);
                break;
            case 'tab':
                if (!isNOU(fItem)) {
                    this.addFocus(fItem);
                }
                else if (!isNOU(firstItem)) {
                    this.addFocus(firstItem);
                }
                break;
            case 'moveDown':
                this.navigateDown(fItem, true);
                break;
            case 'moveLeft':
                this.navigateRight(fItem, false);
                break;
            case 'moveRight':
                this.navigateRight(fItem, true);
                break;
            case 'moveUp':
                this.navigateDown(fItem, false);
                break;
            case 'ctrlEnd':
            case 'shiftEnd':
            case 'csEnd':
                this.csEndKey(lastItem, e);
                break;
            case 'ctrlHome':
            case 'shiftHome':
            case 'csHome':
                this.csHomeKey(firstItem, e);
                break;
            case 'ctrlDown':
            case 'shiftDown':
            case 'csDown':
                this.csDownKey(fItem, e);
                break;
            case 'ctrlLeft':
            case 'shiftLeft':
            case 'csLeft':
                this.csLeftKey(fItem, e);
                break;
            case 'ctrlRight':
            case 'shiftRight':
            case 'csRight':
                this.csRightKey(fItem, e);
                break;
            case 'ctrlUp':
            case 'shiftUp':
            case 'csUp':
                this.csUpKey(fItem, e);
                break;
            case 'space':
                this.spaceKey(fItem);
                break;
            case 'ctrlSpace':
            case 'shiftSpace':
            case 'csSpace':
                if (!isNOU(fItem)) {
                    this.doSelection(fItem, e);
                }
                break;
            case 'ctrlA':
                this.ctrlAKey(firstItem, lastItem);
                break;
            case 'enter':
                this.doOpenAction(this.parent.visitedItem ? this.parent.visitedItem : this.getVisitedItem());
                break;
            case 'altEnter':
                this.parent.getDetails();
                break;
            case 'esc':
                this.escapeKey();
                break;
            case 'del':
            case 'shiftdel':
                if (this.parent.selectedItems && this.parent.selectedItems.length > 0) {
                    createDialog(this.parent, 'Delete');
                }
                break;
            case 'ctrlC':
                this.copy();
                break;
            case 'ctrlV':
                this.parent.pasteHandler();
                break;
            case 'ctrlX':
                this.cut();
                break;
            case 'f2':
                if (this.parent.selectedItems.length === 1) {
                    this.updateRenameData();
                    createDialog(this.parent, 'Rename');
                }
                break;
        }
    };
    LargeIconsView.prototype.updateRenameData = function () {
        var item = select('.' + CLS.LIST_ITEM + '.' + CLS.ACTIVE, this.element);
        var data = this.getItemObject(item);
        this.parent.itemData = [data];
        this.parent.currentItemText = getValue('name', data);
        this.parent.isFile = getValue('isFile', data);
    };
    LargeIconsView.prototype.getVisitedItem = function () {
        var currFiles = getValue(this.parent.path, this.parent.feFiles);
        var item = this.parent.selectedItems[this.parent.selectedItems.length - 1];
        var indexes = this.getIndexes(currFiles, [item]);
        return this.itemList[indexes[0]];
    };
    LargeIconsView.prototype.getFocusedItem = function () {
        return select('.' + CLS.LIST_ITEM + '.' + CLS.FOCUS, this.element);
    };
    LargeIconsView.prototype.getActiveItem = function () {
        return select('.' + CLS.LIST_ITEM + '.' + CLS.ACTIVE, this.element);
    };
    LargeIconsView.prototype.getFirstItem = function () {
        return this.itemList[0];
    };
    LargeIconsView.prototype.getLastItem = function () {
        return this.itemList[this.itemList.length - 1];
    };
    LargeIconsView.prototype.navigateItem = function (item) {
        this.setFocus(item);
    };
    LargeIconsView.prototype.navigateDown = function (fItem, isTowards) {
        var nItem = this.getNextItem(fItem, isTowards, this.perRow);
        this.setFocus(nItem);
    };
    LargeIconsView.prototype.navigateRight = function (fItem, isTowards) {
        var nItem = this.getNextItem(fItem, isTowards);
        this.setFocus(nItem);
    };
    LargeIconsView.prototype.getNextItem = function (li, isTowards, perRow) {
        if (isNOU(li)) {
            return this.getFocusedItem() || this.getActiveItem() || this.getFirstItem();
        }
        var index = this.itemList.indexOf(li);
        var nextItem;
        do {
            if (isTowards) {
                index = perRow ? index + perRow : index + 1;
            }
            else {
                index = perRow ? index - perRow : index - 1;
            }
            nextItem = this.itemList[index];
            if (isNOU(nextItem)) {
                return li;
            }
        } while (!isVisible(nextItem));
        return nextItem;
    };
    LargeIconsView.prototype.setFocus = function (nextItem) {
        if (!isNOU(nextItem)) {
            this.startItem = nextItem;
            this.clearSelect();
            this.addActive(nextItem);
            this.addFocus(nextItem);
            this.parent.notify(events.selectionChanged, {});
            this.triggerSelect('select', nextItem);
        }
    };
    /* istanbul ignore next */
    LargeIconsView.prototype.cut = function () {
        cutFiles(this.parent);
        this.parent.fileOperation(this.parent.nodeNames);
    };
    /* istanbul ignore next */
    LargeIconsView.prototype.copy = function () {
        copyFiles(this.parent);
        this.parent.fileOperation(this.parent.nodeNames);
    };
    /* istanbul ignore next */
    LargeIconsView.prototype.escapeKey = function () {
        removeBlur(this.parent);
        this.parent.selectedNodes = [];
        this.parent.navigationpaneModule.treeNodes = [];
    };
    LargeIconsView.prototype.spaceKey = function (fItem) {
        if (!isNOU(fItem) && !fItem.classList.contains(CLS.ACTIVE)) {
            this.addActive(fItem);
            this.parent.notify(events.selectionChanged, {});
            this.triggerSelect('select', fItem);
        }
    };
    LargeIconsView.prototype.ctrlAKey = function (firstItem, lastItem) {
        if (this.parent.allowMultiSelection && !isNOU(firstItem)) {
            this.startItem = firstItem;
            var eveArgs = { ctrlKey: true, shiftKey: true };
            this.doSelection(lastItem, eveArgs);
        }
    };
    LargeIconsView.prototype.csEndKey = function (lastItem, e) {
        if (!this.parent.allowMultiSelection) {
            this.navigateItem(lastItem);
        }
        else if (!isNOU(lastItem)) {
            (e.action === 'ctrlEnd') ? this.addFocus(lastItem) : this.doSelection(lastItem, e);
        }
    };
    LargeIconsView.prototype.csHomeKey = function (firstItem, e) {
        if (!this.parent.allowMultiSelection) {
            this.navigateItem(firstItem);
        }
        else if (!isNOU(firstItem)) {
            (e.action === 'ctrlHome') ? this.addFocus(firstItem) : this.doSelection(firstItem, e);
        }
    };
    LargeIconsView.prototype.csDownKey = function (fItem, e) {
        if (!this.parent.allowMultiSelection) {
            this.navigateDown(fItem, true);
        }
        else {
            var dItem = this.getNextItem(fItem, true, this.perRow);
            if (!isNOU(dItem)) {
                (e.action === 'ctrlDown') ? this.addFocus(dItem) : this.doSelection(dItem, e);
            }
        }
    };
    LargeIconsView.prototype.csLeftKey = function (fItem, e) {
        if (!this.parent.allowMultiSelection) {
            this.navigateRight(fItem, false);
        }
        else {
            var lItem = this.getNextItem(fItem, false);
            if (!isNOU(lItem)) {
                (e.action === 'ctrlLeft') ? this.addFocus(lItem) : this.doSelection(lItem, e);
            }
        }
    };
    LargeIconsView.prototype.csRightKey = function (fItem, e) {
        if (!this.parent.allowMultiSelection) {
            this.navigateRight(fItem, true);
        }
        else {
            var rItem = this.getNextItem(fItem, true);
            if (!isNOU(rItem)) {
                (e.action === 'ctrlRight') ? this.addFocus(rItem) : this.doSelection(rItem, e);
            }
        }
    };
    LargeIconsView.prototype.csUpKey = function (fItem, e) {
        if (!this.parent.allowMultiSelection) {
            this.navigateDown(fItem, false);
        }
        else {
            var uItem = this.getNextItem(fItem, false, this.perRow);
            if (!isNOU(uItem)) {
                (e.action === 'ctrlUp') ? this.addFocus(uItem) : this.doSelection(uItem, e);
            }
        }
    };
    LargeIconsView.prototype.addActive = function (nextItem) {
        if (!isNOU(nextItem)) {
            if (!nextItem.classList.contains(CLS.ACTIVE)) {
                if (!this.isSetModel) {
                    this.parent.selectedItems.push(nextItem.textContent);
                }
                addClass([nextItem], [CLS.ACTIVE]);
                this.checkState(nextItem, true);
            }
            this.parent.visitedItem = nextItem;
        }
    };
    LargeIconsView.prototype.removeActive = function (preItem) {
        if (!isNOU(preItem)) {
            removeClass([preItem], [CLS.ACTIVE]);
            this.checkState(preItem, false);
            var index = this.parent.selectedItems.indexOf(preItem.textContent);
            if (index > -1) {
                this.parent.selectedItems.splice(index, 1);
            }
            this.parent.visitedItem = null;
        }
    };
    LargeIconsView.prototype.addFocus = function (item) {
        var fItem = this.getFocusedItem();
        if (fItem) {
            removeClass([fItem], [CLS.FOCUS]);
        }
        addClass([item], [CLS.FOCUS]);
    };
    LargeIconsView.prototype.checkState = function (item, toCheck) {
        if (!this.parent.allowMultiSelection) {
            return;
        }
        var checkEle = select('.' + CLS.FRAME, item);
        if (toCheck) {
            if (!checkEle.classList.contains(CLS.CHECK)) {
                addClass([checkEle], CLS.CHECK);
                closest(checkEle, '.' + CLS.CB_WRAP).setAttribute('aria-checked', 'true');
            }
        }
        else {
            if (checkEle.classList.contains(CLS.CHECK)) {
                removeClass([checkEle], CLS.CHECK);
                closest(checkEle, '.' + CLS.CB_WRAP).setAttribute('aria-checked', 'false');
            }
        }
    };
    LargeIconsView.prototype.clearSelect = function () {
        var eles = Array.prototype.slice.call(selectAll('.' + CLS.ACTIVE, this.listElements));
        for (var i = 0, len = eles.length; i < len; i++) {
            this.removeActive(eles[i]);
        }
    };
    LargeIconsView.prototype.resizeHandler = function () {
        this.getItemCount();
    };
    LargeIconsView.prototype.getItemCount = function () {
        var perRow = 1;
        if (this.itemList) {
            for (var i = 0, len = this.itemList.length - 1; i < len; i++) {
                if (this.itemList[i].getBoundingClientRect().top === this.itemList[i + 1].getBoundingClientRect().top) {
                    perRow++;
                }
                else {
                    break;
                }
            }
        }
        this.perRow = perRow;
    };
    LargeIconsView.prototype.triggerSelect = function (action, item) {
        var data = this.getItemObject(item);
        this.parent.visitedData = data;
        var eventArgs = { action: action, fileDetails: data };
        this.parent.trigger('fileSelect', eventArgs);
    };
    LargeIconsView.prototype.selectItems = function (files, items) {
        var indexes = this.getIndexes(files, items);
        for (var j = 0, len = indexes.length; j < len; j++) {
            var eveArgs = { ctrlKey: true, shiftKey: false };
            this.doSelection(this.itemList[indexes[j]], eveArgs);
        }
    };
    LargeIconsView.prototype.getIndexes = function (files, items) {
        var indexes = [];
        for (var i = 0, len = this.items.length; i < len; i++) {
            if (items.indexOf(getValue('name', this.items[i])) !== -1) {
                indexes.push(i);
            }
        }
        return indexes;
    };
    LargeIconsView.prototype.getItemObject = function (item) {
        var index = this.itemList.indexOf(item);
        return this.items[index];
    };
    return LargeIconsView;
}());
export { LargeIconsView };
