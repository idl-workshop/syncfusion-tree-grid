import * as CLS from '../base/classes';
import * as events from '../base/constant';
import { read } from '../common/operations';
import { getValue, setValue, isNullOrUndefined as isNOU, matches, select, createElement } from '@syncfusion/ej2-base';
import { closest } from '@syncfusion/ej2-base';
import { DataManager, Query } from '@syncfusion/ej2-data';
/**
 * Utility file for common actions
 */
//Gets the path for tree nodes
/* istanbul ignore next */
export function copyPath(file) {
    var path = file.path.substr(0, file.path.length - 1);
    file.targetPath = path.substr(0, path.lastIndexOf('/') + 1);
}
export function updatePath(node, text, instance) {
    instance.setProperties({ path: getPath(node, text) }, true);
    instance.pathId = getPathId(node);
}
export function getPath(element, text) {
    var matched = getParents(element, text, false);
    var path = '/';
    for (var i = matched.length - 2; i >= 0; i--) {
        path += matched[i] + '/';
    }
    return path;
}
export function getPathId(node) {
    var matched = getParents(node, node.getAttribute('data-uid'), true);
    var ids = [];
    for (var i = matched.length - 1; i >= 0; i--) {
        ids.push(matched[i]);
    }
    return ids;
}
export function getParents(element, text, isId) {
    var matched = [text];
    var el = element.parentNode;
    while (!isNOU(el)) {
        if (matches(el, '.' + CLS.LIST_ITEM)) {
            var parentText = isId ? el.getAttribute('data-uid') : select('.' + CLS.LIST_TEXT, el).textContent;
            matched.push(parentText);
        }
        el = el.parentNode;
    }
    return matched;
}
//Stores tree nodes while performing cut, copy and paste operation
export function treeNodes(tree, gridFiles, action) {
    var _a;
    /* istanbul ignore next */
    if (gridFiles) {
        var i = 0;
        for (i; i < gridFiles.length; i++) {
            var files = gridFiles[i];
            var id = files.id;
            if (files.isFile === false) {
                (action === 'cut') ? tree.treeNodes.push(id) : tree.treeNodes = tree.treeNodes;
                (action === 'copy') ?
                    tree.copyNodes.push((_a = {}, _a['name'] = files.name, _a)) : tree.copyNodes = tree.copyNodes;
                (action === 'Delete') ? tree.removeNodes.push(id) : tree.removeNodes = tree.removeNodes;
            }
        }
    }
    else {
        tree.treeNodes = (action === 'cut') ? tree.treeObj.selectedNodes : tree.treeNodes;
        tree.removeNodes = (action === 'Delete') ? tree.treeObj.selectedNodes : tree.removeNodes;
    }
}
// Selects active element in File Manager
/* istanbul ignore next */
export function activeElement(action, isGrid, file) {
    var nodeNames = [];
    removeBlur(file);
    var blurEle = file.activeElements;
    file.targetPath = file.path;
    var i = 0;
    var isFile;
    var id;
    if (blurEle) {
        getModule(blurEle[0], file);
        while (i < blurEle.length) {
            if (action === 'cut') {
                addBlur(blurEle[i]);
            }
            isFile = (file.activeModule === 'largeiconsview') ?
                ((blurEle[i].querySelector('.' + CLS.LARGE_ICON_FOLDER)) ? false : true) : null;
            id = (isFile === false) ? closest(blurEle[i], 'li').getAttribute('data-uid') : null;
            (blurEle[i].querySelector('.' + CLS.LIST_TEXT)) ?
                nodeNames.push({ 'name': blurEle[i].querySelector('.' + CLS.LIST_TEXT).textContent, 'isFile': isFile, 'id': id }) :
                nodeNames = nodeNames;
            i++;
        }
        if (file.activeModule === 'detailsview' && isGrid !== false) {
            nodeNames = file.detailsviewModule.gridSelectNodes();
            if ((action === 'cut' || action === 'copy' || action === 'Delete') && file.navigationpaneModule) {
                treeNodes(file.navigationpaneModule, nodeNames, action);
            }
        }
        else if (file.activeModule === 'largeiconsview' && file.navigationpaneModule) {
            (action === 'cut' || action === 'copy' || action === 'Delete') ?
                treeNodes(file.navigationpaneModule, nodeNames, action) : nodeNames = nodeNames;
        }
        else {
            ((action === 'cut' || action === 'copy' || action === 'Delete') && file.navigationpaneModule) ?
                treeNodes(file.navigationpaneModule, null, action) : nodeNames = nodeNames;
            if (file.activeModule === 'navigationpane') {
                copyPath(file);
            }
        }
    }
    return nodeNames;
}
export function addBlur(nodes) {
    nodes.classList.add(CLS.BLUR);
}
// Removes blur from elements
export function removeBlur(file, hover) {
    var blurEle = (!hover) ? file.element.querySelectorAll('.' + CLS.BLUR) :
        file.element.querySelectorAll('.' + CLS.HOVER);
    var i = 0;
    while (i < blurEle.length) {
        (!hover) ? blurEle[i].classList.remove(CLS.BLUR) : blurEle[i].classList.remove(CLS.HOVER);
        i++;
    }
}
// Gets module name
/* istanbul ignore next */
export function getModule(element, file) {
    if (element) {
        if (element.classList.contains(CLS.ROWCELL)) {
            file.activeModule = 'detailsview';
        }
        else if (closest(element, '.' + CLS.LARGE_ICON)) {
            file.activeModule = 'largeiconsview';
        }
        else {
            file.activeModule = 'navigationpane';
        }
    }
}
export function refresh(parent) {
    parent.itemData = [getPathObject(parent)];
    read(parent, events.refreshEnd, parent.path);
}
export function openAction(parent) {
    read(parent, events.openEnd, parent.path);
}
export function getFileObject(parent) {
    var currFiles = getValue(parent.path, parent.feFiles);
    if (currFiles) {
        var item = parent.selectedItems[parent.selectedItems.length - 1];
        for (var i = 0, len = currFiles.length; i < len; i++) {
            if (item === getValue('name', currFiles[i])) {
                return currFiles[i];
            }
        }
    }
    return getValue(parent.path, parent.feParent);
}
export function getPathObject(parent) {
    return getValue(parent.path, parent.feParent);
}
// Copy files
export function copyFiles(parent) {
    parent.cutNodes = [];
    parent.navigationpaneModule.treeNodes = [];
    parent.navigationpaneModule.copyNodes = [];
    parent.nodeNames = [];
    parent.selectedNodes = [];
    parent.nodeNames = activeElement('copy', null, parent);
    if (parent.nodeNames) {
        parent.fileAction = 'CopyTo';
        parent.enablePaste = true;
        parent.notify(events.showPaste, {});
    }
}
// Cut files
export function cutFiles(parent) {
    parent.navigationpaneModule.treeNodes = [];
    parent.navigationpaneModule.copyNodes = [];
    parent.nodeNames = [];
    parent.selectedNodes = [];
    parent.nodeNames = activeElement('cut', null, parent);
    if (parent.nodeNames) {
        parent.cutNodes = parent.nodeNames;
        parent.fileAction = 'MoveTo';
        parent.enablePaste = true;
        parent.notify(events.showPaste, {});
    }
}
// To add class for fileType
export function fileType(file) {
    var isFile = getValue('isFile', file);
    if (!isFile) {
        return 'e-fe-folder';
    }
    var imageFormat = ['bmp', 'dib', 'jpg', 'jpeg', 'jpe', 'jfif', 'gif', 'tif', 'tiff', 'png', 'ico'];
    var audioFormat = ['mp3', 'wav', 'aac', 'ogg', 'wma', 'aif', 'fla', 'm4a'];
    var videoFormat = ['webm', 'mkv', 'flv', 'vob', 'ogv', 'ogg', 'avi', 'wmv', 'mp4', '3gp'];
    var knownFormat = ['css', 'exe', 'html', 'js', 'msi', 'pdf', 'pptx', 'ppt', 'rar', 'zip', 'txt', 'docx', 'doc',
        'xlsx', 'xls', 'xml', 'rtf', 'php'];
    var filetype = getValue('type', file);
    filetype = filetype.toLowerCase();
    if (filetype.indexOf('.') !== -1) {
        filetype = filetype.split('.').join('');
    }
    var iconType;
    if (imageFormat.indexOf(filetype) !== -1) {
        iconType = CLS.ICON_IMAGE;
    }
    else if (audioFormat.indexOf(filetype) !== -1) {
        iconType = CLS.ICON_MUSIC;
    }
    else if (videoFormat.indexOf(filetype) !== -1) {
        iconType = CLS.ICON_VIDEO;
    }
    else if (knownFormat.indexOf(filetype) !== -1) {
        iconType = 'e-fe-' + filetype;
    }
    else {
        iconType = 'e-fe-unknown e-fe-' + filetype;
    }
    return iconType;
}
export function getImageUrl(parent, item) {
    var baseUrl = parent.ajaxSettings.getImageUrl ? parent.ajaxSettings.getImageUrl : parent.ajaxSettings.url;
    var imgUrl;
    if (parent.breadcrumbbarModule.searchObj.element.value !== '') {
        imgUrl = baseUrl + '?path=' + getValue('filterPath', item);
    }
    else {
        imgUrl = baseUrl + '?path=' + parent.path + getValue('name', item);
    }
    return imgUrl;
}
export function getSortedData(parent, items) {
    if (items.length === 0) {
        return items;
    }
    var query = new Query().sortBy(parent.sortBy, parent.sortOrder.toLowerCase(), true).group('isFile');
    var lists = new DataManager(items).executeLocal(query);
    return getValue('records', lists);
}
/* istanbul ignore next */
export function getItemObject(parent, item) {
    var name = select('.' + CLS.LIST_TEXT, item).textContent;
    return getObject(parent, name);
}
export function getObject(parent, name) {
    var currFiles = getValue(parent.path, parent.feFiles);
    var query = new Query().where('name', 'equal', name);
    var lists = new DataManager(currFiles).executeLocal(query);
    return lists[0];
}
export function createEmptyElement(parent, operation, element) {
    if (isNOU(element.querySelector('.' + CLS.EMPTY))) {
        var emptyDiv = createElement('div', { className: CLS.EMPTY });
        var emptyFolder = createElement('div', { className: CLS.LARGE_EMPTY_FOLDER });
        var emptyEle = createElement('div', { className: CLS.EMPTY_CONTENT });
        var dragFile = createElement('div', { className: CLS.EMPTY_INNER_CONTENT });
        if (parent.view === 'Details') {
            element.querySelector('.' + CLS.GRID_VIEW).appendChild(emptyDiv);
        }
        else {
            element.appendChild(emptyDiv);
        }
        emptyDiv.appendChild(emptyFolder);
        emptyDiv.appendChild(emptyEle);
        emptyDiv.appendChild(dragFile);
    }
    if (element.querySelector('.' + CLS.EMPTY)) {
        if (operation === 'search') {
            element.querySelector('.' + CLS.EMPTY_CONTENT).innerHTML = getLocaleText(parent, 'Search-Empty');
            element.querySelector('.' + CLS.EMPTY_INNER_CONTENT).innerHTML = getLocaleText(parent, 'Search-Key');
        }
        else {
            element.querySelector('.' + CLS.EMPTY_CONTENT).innerHTML = getLocaleText(parent, 'Folder-Empty');
            element.querySelector('.' + CLS.EMPTY_INNER_CONTENT).innerHTML = getLocaleText(parent, 'File-Upload');
        }
    }
}
export function getDirectories(files) {
    return new DataManager(files).executeLocal(new Query().where(events.isFile, 'equal', false, false));
}
export function setNodeId(result, rootId) {
    setValue('nodeId', rootId, result.cwd);
    var dirs = getDirectories(result.files);
    for (var i = 0, len = dirs.length; i < len; i++) {
        setValue('nodeId', rootId + '_' + i, dirs[i]);
    }
}
export function setDateObject(args) {
    for (var i = 0; i < args.length; i++) {
        setValue('dateCreated', new Date(getValue('dateCreated', args[i])), args[i]);
        setValue('dateModified', new Date(getValue('dateModified', args[i])), args[i]);
    }
}
export function getLocaleText(parent, text) {
    var locale = parent.localeObj.getConstant(text);
    return (locale === '') ? text : locale;
}
export function getCssClass(parent, css) {
    var cssClass = parent.cssClass;
    cssClass = (isNOU(cssClass) || cssClass === '') ? css : (cssClass + ' ' + css);
    return cssClass;
}
export function sortbyClickHandler(parent, args) {
    var tick;
    if (args.item.id.indexOf('ascending') !== -1 || args.item.id.indexOf('descending') !== -1) {
        tick = true;
    }
    else {
        tick = false;
    }
    if (!tick) {
        parent.sortBy = getSortField(args.item.id);
    }
    else {
        parent.sortOrder = getSortField(args.item.id);
    }
    if (parent.view === 'Details') {
        if (parent.isMobile) {
            read(parent, events.layoutChange, parent.path);
        }
        else {
            parent.notify(events.sortColumn, { module: 'gridview' });
        }
    }
    if (parent.view === 'LargeIcons') {
        read(parent, events.layoutChange, parent.path);
    }
    parent.notify(events.sortByChange, {});
}
export function getSortField(id) {
    var text = id.substring(id.lastIndexOf('_') + 1);
    var field = text;
    switch (text) {
        case 'date':
            field = 'dateModified';
            break;
        case 'ascending':
            field = 'Ascending';
            break;
        case 'descending':
            field = 'Descending';
            break;
    }
    return field;
}
export function setNextPath(parent, path) {
    var currfolders = path.split('/');
    var folders = parent.originalPath.split('/');
    for (var i = currfolders.length - 1, len = folders.length - 1; i < len; i++) {
        var eventName = (folders[i + 1] === '') ? events.finalizeEnd : events.initialEnd;
        var newPath = (folders[i] === '') ? '/' : (parent.path + folders[i] + '/');
        var data = getObject(parent, folders[i]);
        var id = getValue('nodeId', data);
        parent.setProperties({ path: newPath }, true);
        parent.pathId.push(id);
        parent.itemData = [data];
        read(parent, eventName, parent.path);
        break;
    }
}
export function openSearchFolder(parent, data) {
    var fPath = getValue('filterPath', data) + '/';
    fPath = fPath.replace(/\\/g, '/');
    parent.notify(events.clearPathInit, { selectedNode: parent.pathId[parent.pathId.length - 1] });
    parent.originalPath = fPath;
    read(parent, (parent.path !== parent.originalPath) ? events.initialEnd : events.finalizeEnd, parent.path);
}
