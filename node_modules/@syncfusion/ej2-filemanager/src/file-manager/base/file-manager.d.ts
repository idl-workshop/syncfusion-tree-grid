import { Component, EmitType, ModuleDeclaration, L10n } from '@syncfusion/ej2-base';
import { INotifyPropertyChanged } from '@syncfusion/ej2-base';
import { Splitter } from '@syncfusion/ej2-layouts';
import { Dialog } from '@syncfusion/ej2-popups';
import { ToolbarSettingsModel } from '../models/index';
import { NavigationPaneSettingsModel, DetailsViewSettingsModel } from '../models/index';
import { AjaxSettingsModel, SearchSettingsModel } from '../models/index';
import { Toolbar } from '../actions/toolbar';
import { DetailsView } from '../layout/details-view';
import { LargeIconsView } from '../layout/large-icons-view';
import { Uploader } from '@syncfusion/ej2-inputs';
import { UploadSettingsModel } from '../models/upload-settings-model';
import { FileManagerModel } from './file-manager-model';
import { ITreeView, IContextMenu, viewType, SortOrder } from './interface';
import { FileBeforeSendEventArgs, FileOnSuccessEventArgs, FileOnErrorEventArgs, FileBeforeLoadEventArgs } from './interface';
import { FileOpenEventArgs, FileSelectEventArgs, FileMenuClickEventArgs, FileMenuOpenEventArgs } from './interface';
import { FileToolbarClickEventArgs } from './interface';
import { TreeView as BaseTreeView } from '@syncfusion/ej2-navigations';
import { ContextMenuSettingsModel } from '../models/contextMenu-settings-model';
import { BreadCrumbBar } from '../actions/breadcrumb-bar';
/**
 * The FileManager component allows users to access and manage the file system through the web  browser. It can performs the
 * functionalities like add, rename, search, sort, upload and delete files or folders. And also it
 * provides an easy way of  dynamic injectable modules like toolbar, navigationpane, detailsview, largeiconsview.
 * ```html
 *  <div id="file"></div>
 * ```
 * ```typescript,
 *  let feObj: FileManager = new FileManager();
 *  feObj.appendTo('#file');
 * ```
 */
export declare class FileManager extends Component<HTMLElement> implements INotifyPropertyChanged {
    /** @hidden */
    toolbarModule: Toolbar;
    /** @hidden */
    detailsviewModule: DetailsView;
    /** @hidden */
    navigationpaneModule: ITreeView;
    /** @hidden */
    largeiconsviewModule: LargeIconsView;
    /** @hidden */
    contextmenuModule: IContextMenu;
    /** @hidden */
    breadcrumbbarModule: BreadCrumbBar;
    private keyboardModule;
    private keyConfigs;
    originalPath: string;
    pathId: string[];
    expandedId: string;
    itemData: Object[];
    visitedData: Object;
    visitedItem: Element;
    toolbarSelection: boolean;
    targetPath: string;
    feParent: Object[];
    feFiles: Object[];
    activeElements: NodeListOf<Element>;
    activeModule: string;
    treeObj: BaseTreeView;
    dialogObj: Dialog;
    viewerObj: Dialog;
    extDialogObj: Dialog;
    selectedNodes: string[];
    duplicateItems: string[];
    previousPath: string[];
    nextPath: string[];
    fileAction: string;
    replaceItems: string[];
    createdItem: {
        [key: string]: Object;
    };
    renamedItem: {
        [key: string]: Object;
    };
    uploadItem: string[];
    fileLength: number;
    deleteRecords: string[];
    fileView: string;
    isDevice: Boolean;
    isMobile: Boolean;
    isBigger: Boolean;
    isFile: boolean;
    nodeNames: Object[];
    sortOrder: SortOrder;
    sortBy: string;
    cutNodes: Object[];
    pasteNodes: Object[];
    currentItemText: string;
    renameText: string;
    parentPath: string;
    enablePaste: boolean;
    splitterObj: Splitter;
    persistData: boolean;
    singleSelection: string;
    breadCrumbBarNavigation: HTMLElement;
    localeObj: L10n;
    uploadObj: Uploader;
    uploadDialogObj: Dialog;
    private isOpened;
    searchedItems: {
        [key: string]: Object;
    }[];
    /**
     * Specifies the AJAX settings of the file manager.
     * @default {
     *  getImageUrl: null;
     *  url: null;
     *  uploadUrl: null;
     *  downloadUrl: null;
     * }
     */
    ajaxSettings: AjaxSettingsModel;
    /**
     * Enables or disables the multiple files selection of the file manager.
     * @default true
     */
    allowMultiSelection: boolean;
    /**
     * Specifies the context menu settings of the file manager.
     * @default {
     *  file: ['Open', '|', 'Delete', 'Rename', '|', 'Details'],
     *  folder: ['Open', '|', 'Delete', 'Rename', '|', 'Details'],
     *  layout: ['SortBy', 'View', 'Refresh', '|', 'NewFolder', 'Upload', '|', 'Details', '|', 'SelectAll'],
     *  visible: true,
     * }
     */
    contextMenuSettings: ContextMenuSettingsModel;
    /**
     * Specifies the root CSS class of the file manager that allows to customize the appearance by overriding the styles.
     * @default ''
     */
    cssClass: string;
    /**
     * Specifies the details view settings of the file manager.
     * @default {
     * Columns: [{
     * field: 'name', headerText: 'Name', minWidth: 120, width: 'auto', customAttributes: { class: 'e-fe-grid-name' },
     * template: '<span class="e-fe-text" title="${name}">${name}</span>'},{field: 'size', headerText: 'Size',
     * minWidth: 50, width: '110', template: '<span class="e-fe-size">${size}</span>'},
     * { field: 'dateModified', headerText: 'DateModified',
     * minWidth: 50, width: '190'}
     * ]
     * }
     */
    detailsViewSettings: DetailsViewSettingsModel;
    /**
     * Enables or disables persisting component's state between page reloads. If enabled, following APIs will persist.
     * 1. `view` - Represents the previous view of the file manager.
     * 2. `path` - Represents the previous path of the file manager.
     * 3. `selectedItems` - Represents the previous selected items in the file manager.
     * @default false
     */
    enablePersistence: boolean;
    /**
     * When set to true, enables RTL mode of the component that displays the content in the right-to-left direction.
     * @default false
     */
    enableRtl: boolean;
    /**
     * Specifies the height of the file manager.
     * @default '400px'
     */
    height: string | number;
    /**
     * Specifies the initial view of the file manager.
     * With the help of this property, initial view can be changed to details or largeicons view.
     * @default 'LargeIcons'
     */
    view: viewType;
    /**
     * Specifies the navigationpane settings of the file manager.
     * @default {
     *  maxWidth: '650px',
     *  minWidth: '240px',
     *  visible: true,
     * }
     */
    navigationPaneSettings: NavigationPaneSettingsModel;
    /**
     * Specifies the current path of the file manager.
     * @default '/'
     */
    path: string;
    /**
     * Specifies the search settings of the file manager.
     * @default {
     *  allowSearchOnTyping: true,
     *  filterType: 'contains',
     *  ignoreCase: true
     * }
     */
    searchSettings: SearchSettingsModel;
    /**
     * Specifies the selected folders and files name of the  file manager
     * @default []
     */
    selectedItems: string[];
    /**
     * Show or hide the file extension in file manager.
     * @default true
     */
    showFileExtension: boolean;
    /**
     * Show or hide the files and folders that are marked as hidden.
     * @default false
     */
    showHiddenItems: boolean;
    /**
     * Shows or hides the thumbnail images in largeicons view.
     * @default true
     */
    showThumbnail: boolean;
    /**
     * Specifies the group of items aligned horizontally in the toolbar.
     * @default {
     *  items: ['NewFolder', 'Upload', 'Delete', 'Download', 'Rename', 'SortBy', 'Refresh', 'Selection', 'View', 'Details'],
     *  visible: true
     * }
     */
    toolbarSettings: ToolbarSettingsModel;
    /**
     * Specifies the upload settings for the file manager.
     * @default null
     */
    uploadSettings: UploadSettingsModel;
    /**
     * Specifies the width of the file manager.
     * @default '100%'
     */
    width: string | number;
    /**
     * Triggers before the file/folder is rendered.
     * @event
     */
    beforeFileLoad: EmitType<FileBeforeLoadEventArgs>;
    /**
     * Triggers before the file/folder is opened.
     * @event
     */
    beforeFileOpen: EmitType<FileOpenEventArgs>;
    /**
     * Triggers before the AJAX request send to the server.
     * @event
     */
    beforeSend: EmitType<FileBeforeSendEventArgs>;
    /**
     * Triggers when the file manager component is created.
     * @event
     */
    created: EmitType<Object>;
    /**
     * Triggers when the file manager component is destroyed.
     * @event
     */
    destroyed: EmitType<Object>;
    /**
     * Triggers when the file/folder is selected/unselected.
     * @event
     */
    fileSelect: EmitType<FileSelectEventArgs>;
    /**
     * Triggers when the context menu item is clicked.
     * @event
     */
    menuClick: EmitType<FileMenuClickEventArgs>;
    /**
     * Triggers before the context menu is opened.
     * @event
     */
    menuOpen: EmitType<FileMenuOpenEventArgs>;
    /**
     * Triggers when the AJAX request is failed.
     * @event
     */
    onError: EmitType<FileOnErrorEventArgs>;
    /**
     * Triggers when the AJAX request is success.
     * @event
     */
    onSuccess: EmitType<FileOnSuccessEventArgs>;
    /**
     * Triggers when the toolbar item is clicked.
     * @event
     */
    toolbarClick: EmitType<FileToolbarClickEventArgs>;
    constructor(options?: FileManagerModel, element?: string | HTMLElement);
    /**
     * Get component name.
     * @returns string
     * @private
     */
    getModuleName(): string;
    /**
     * Initialize the event handler
     */
    protected preRender(): void;
    /**
     * Gets the properties to be maintained upon browser refresh..
     * @returns string
     * @hidden
     */
    getPersistData(): string;
    /**
     * To provide the array of modules needed for component rendering
     * @return {ModuleDeclaration[]}
     * @hidden
     */
    requiredModules(): ModuleDeclaration[];
    /**
     * To Initialize the control rendering
     * @private
     */
    protected render(): void;
    private ensurePath;
    private initialize;
    private addWrapper;
    private adjustHeight;
    private splitterResize;
    private splitterAdjust;
    private addCssClass;
    private showSpinner;
    private hideSpinner;
    private onContextMenu;
    private checkMobile;
    private renderFileUpload;
    private renderUploadBox;
    private updateUploader;
    private onOpen;
    private onClose;
    private onUploading;
    private onRemoving;
    private onClearing;
    private onSelected;
    private onUploadSuccess;
    private onUploadFailure;
    private onInitialEnd;
    private addEventListeners;
    private removeEventListeners;
    private resizeHandler;
    private keyActionHandler;
    private wireEvents;
    private unWireEvents;
    private setPath;
    /**
     * Called internally if any of the property value changed.
     * @param  {FileManager} newProp
     * @param  {FileManager} oldProp
     * @returns void
     * @private
     */
    onPropertyChanged(newProp: FileManagerModel, oldProp: FileManagerModel): void;
    private ajaxSettingSetModel;
    private localeSetModelOption;
    /**
     * Triggers when the component is destroyed.
     * @returns void
     */
    destroy(): void;
    /**
     * Disables the specified toolbar items of the file manager.
     * @param {items: string[]} items - Specifies an array of items to be disabled.
     * @returns void
     */
    disableToolbarItems(items: string[]): void;
    /**
     * Enables the specified toolbar items of the file manager.
     * @param {items: string[]} items - Specifies an array of items to be enabled.
     * @returns void
     */
    enableToolbarItems(items: string[]): void;
    /**
     * Refresh the folder files of the file manager.
     * @returns void
     */
    refreshFiles(): void;
    /**
     * To select node names for performing file operations
     * @public
     * @hidden
     */
    fileOperation(nodes: Object[], operation?: string): void;
    /**
     * Gets details of file's / folder's
     * @hidden
     */
    getDetails(): void;
    /**
     * Performs paste operation
     * @hidden
     */
    pasteHandler(): void;
    /**
     * Performs delete operation
     * @hidden
     */
    deleteHandler(items: Object[]): void;
    /**
     * Specifies the direction of FileManager
     */
    private setRtl;
}
