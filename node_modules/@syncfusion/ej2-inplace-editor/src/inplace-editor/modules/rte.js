import { RichTextEditor, HtmlEditor } from '@syncfusion/ej2-richtexteditor';
import { MarkdownEditor, Toolbar, Link, Image, QuickToolbar, Table } from '@syncfusion/ej2-richtexteditor';
import { Base } from './base-module';
/**
 * The `RTE` module is used configure the properties of RTE type editor.
 */
var Rte = /** @class */ (function () {
    function Rte(parent) {
        this.compObj = undefined;
        RichTextEditor.Inject(HtmlEditor, MarkdownEditor, Toolbar, Link, Image, QuickToolbar, Table);
        this.parent = parent;
        this.parent.rteModule = this;
        this.base = new Base(this.parent, this);
    }
    Rte.prototype.render = function (e) {
        this.compObj = new RichTextEditor(this.parent.model, e.target);
    };
    Rte.prototype.focus = function () {
        this.compObj.element.focus();
    };
    Rte.prototype.updateValue = function (e) {
        if (this.compObj && e.type === 'RTE') {
            var rteValue = this.compObj.contentModule.getEditPanel().innerHTML === '<p><br></p>' ?
                '' : this.compObj.contentModule.getEditPanel().innerHTML;
            this.parent.setProperties({ value: rteValue }, true);
            this.parent.extendModelValue(this.compObj.value);
        }
    };
    Rte.prototype.refresh = function () {
        this.compObj.refresh();
    };
    /**
     * Destroys the rte module.
     * @method destroy
     * @return {void}
     */
    Rte.prototype.destroy = function () {
        this.base.destroy();
    };
    /**
     * For internal use only - Get the module name.
     */
    Rte.prototype.getModuleName = function () {
        return 'rte';
    };
    return Rte;
}());
export { Rte };
