import { PdfViewer, PdfViewerBase, Toolbar } from '../index';
/**
 * @hidden
 */
export declare class AnnotationToolbar {
    private pdfViewer;
    private pdfViewerBase;
    private primaryToolbar;
    /**
     * @private
     */
    toolbarElement: HTMLElement;
    private highlightItem;
    private underlineItem;
    private strikethroughItem;
    private deleteItem;
    /**
     * @private
     */
    colorDropDownElement: HTMLElement;
    private opacityDropDownElement;
    private colorDropDown;
    private opacityDropDown;
    private closeItem;
    private opacityIndicator;
    private toolbar;
    private colorPalette;
    private opacitySlider;
    private toolbarBorderHeight;
    /**
     * @private
     */
    isToolbarHidden: boolean;
    /**
     * @private
     */
    isMobileAnnotEnabled: boolean;
    private isHighlightEnabled;
    private isUnderlineEnabled;
    private isStrikethroughEnabled;
    private isHighlightBtnVisible;
    private isUnderlineBtnVisible;
    private isStrikethroughBtnVisible;
    private isColorToolVisible;
    private isOpacityToolVisible;
    private isDeleteAnnotationToolVisible;
    private isCurrentAnnotationOpacitySet;
    constructor(viewer: PdfViewer, viewerBase: PdfViewerBase, toolbar: Toolbar);
    /**
     * @private
     */
    initializeAnnotationToolbar(): void;
    createMobileAnnotationToolbar(isEnable: boolean): void;
    hideMobileAnnotationToolbar(): void;
    private createMobileToolbarItems;
    private goBackToToolbar;
    private createToolbarItems;
    private getTemplate;
    private createDropDowns;
    private opacityDropDownOpen;
    private onColorPickerCancelClick;
    private colorDropDownBeforeOpen;
    /**
     * @private
     */
    setCurrentColorInPicker(): void;
    private colorDropDownOpen;
    private opacityChange;
    private opacityDropDownBeforeOpen;
    private createDropDownButton;
    private createColorPicker;
    private onColorPickerChange;
    /**
     * @private
     */
    updateColorInIcon(element: HTMLElement, color: string): void;
    private updateOpacityIndicator;
    private createSlider;
    private afterToolbarCreation;
    private onToolbarClicked;
    /**
     * @private
     */
    showAnnotationToolbar(element: HTMLElement): void;
    private enablePropertiesTool;
    private applyAnnotationToolbarSettings;
    private showSeparator;
    private showHighlightTool;
    private showUnderlineTool;
    private showStrikethroughTool;
    private showColorEditTool;
    private showOpacityEditTool;
    private showAnnotationDeleteTool;
    private applyHideToToolbar;
    private adjustViewer;
    private updateContentContainerHeight;
    private getToolbarHeight;
    private getHeight;
    private handleHighlight;
    private handleUnderline;
    private handleStrikethrough;
    private deselectAllItems;
    /**
     * @private
     */
    selectAnnotationDeleteItem(isEnable: boolean): void;
    /**
     * @private
     */
    enableAnnotationPropertiesTools(isEnable: boolean): void;
    /**
     * @private
     */
    enableAnnotationAddTools(isEnable: boolean): void;
    /**
     * @private
     */
    isAnnotationButtonsEnabled(): boolean;
    private updateToolbarItems;
    /**
     * @private
     */
    resetToolbar(): void;
    /**
     * @private
     */
    clear(): void;
    /**
     * @private
     */
    destroy(): void;
    private getElementHeight;
    private updateViewerHeight;
    private resetViewerHeight;
}
