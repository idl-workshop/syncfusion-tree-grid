import { PdfViewer, PdfViewerBase, IRectangle } from '../index';
import { ChangeEventArgs } from '@syncfusion/ej2-inputs';
/**
 * @hidden
 */
export interface ITextMarkupAnnotation {
    textMarkupAnnotationType: string;
    author: string;
    subject: string;
    modifiedDate: string;
    note: string;
    bounds: any;
    color: any;
    opacity: number;
    rect: any;
}
/**
 * @hidden
 */
export interface IPageAnnotations {
    pageIndex: number;
    annotations: ITextMarkupAnnotation[];
}
/**
 * @hidden
 */
export interface IPageAnnotationBounds {
    pageIndex: number;
    bounds: IRectangle[];
    rect: any;
}
/**
 * The `TextMarkupAnnotation` module is used to handle text markup annotation actions of PDF viewer.
 * @hidden
 */
export declare class TextMarkupAnnotation {
    private pdfViewer;
    private pdfViewerBase;
    /**
     * @private
     */
    isTextMarkupAnnotationMode: boolean;
    /**
     * @private
     */
    currentTextMarkupAddMode: string;
    /**
     * @private
     */
    highlightColor: string;
    /**
     * @private
     */
    underlineColor: string;
    /**
     * @private
     */
    strikethroughColor: string;
    /**
     * @private
     */
    highlightOpacity: number;
    /**
     * @private
     */
    underlineOpacity: number;
    /**
     * @private
     */
    strikethroughOpacity: number;
    /**
     * @private
     */
    selectTextMarkupCurrentPage: number;
    /**
     * @private
     */
    currentTextMarkupAnnotation: ITextMarkupAnnotation;
    private currentAnnotationIndex;
    /**
     * @private
     */
    constructor(pdfViewer: PdfViewer, viewerBase: PdfViewerBase);
    /**
     * @private
     */
    createAnnotationLayer(pageDiv: HTMLElement, pageWidth: number, pageHeight: number, pageNumber: number, displayMode: string): HTMLElement;
    /**
     * @private
     */
    renderTextMarkupAnnotationsInPage(textMarkupAnnotations: any, pageNumber: number): void;
    private renderTextMarkupAnnotations;
    /**
     * @private
     */
    drawTextMarkupAnnotations(type: string): void;
    private convertSelectionToTextMarkup;
    private drawTextMarkups;
    private renderHighlightAnnotation;
    private renderStrikeoutAnnotation;
    private renderUnderlineAnnotation;
    private getProperBounds;
    private drawLine;
    /**
     * @private
     */
    printTextMarkupAnnotations(textMarkupAnnotations: any, pageIndex: number): string;
    /**
     * @private
     */
    saveTextMarkupAnnotations(): string;
    /**
     * @private
     */
    deleteTextMarkupAnnotation(): void;
    /**
     * @private
     */
    modifyColorProperty(color: string): void;
    /**
     * @private
     */
    modifyOpacityProperty(args: ChangeEventArgs): void;
    private modifyAnnotationProperty;
    /**
     * @private
     */
    undoTextMarkupAction(annotation: ITextMarkupAnnotation, pageNumber: number, index: number, action: string): void;
    /**
     * @private
     */
    undoRedoPropertyChange(annotation: ITextMarkupAnnotation, pageNumber: number, index: number, property: string): ITextMarkupAnnotation;
    /**
     * @private
     */
    redoTextMarkupAction(annotation: ITextMarkupAnnotation, pageNumber: number, index: number, action: string): void;
    /**
     * @private
     */
    saveNoteContent(pageNumber: number, note: string): void;
    private clearCurrentAnnotation;
    private clearCurrentAnnotationSelection;
    private getBoundsForSave;
    private getRgbCode;
    private getDrawnBounds;
    /**
     * @private
     */
    rerenderAnnotationsPinch(pageNumber: number): void;
    /**
     * @private
     */
    rerenderAnnotations(pageNumber: number): void;
    /**
     * @private
     */
    resizeAnnotations(width: number, height: number, pageNumber: number): void;
    /**
     * @private
     */
    onTextMarkupAnnotationMouseUp(event: MouseEvent): void;
    /**
     * @private
     */
    onTextMarkupAnnotationTouchEnd(event: TouchEvent): void;
    /**
     * @private
     */
    onTextMarkupAnnotationMouseMove(event: MouseEvent): void;
    private showPopupNote;
    private getCurrentMarkupAnnotation;
    private compareCurrentAnnotations;
    /**
     * @private
     */
    clearAnnotationSelection(pageNumber: number): void;
    private selectAnnotation;
    private drawAnnotationSelectRect;
    private enableAnnotationPropertiesTool;
    /**
     * @private
     */
    maintainAnnotationSelection(): void;
    private storeAnnotations;
    private manageAnnotations;
    private getAnnotations;
    private getPageCollection;
    private getAddedAnnotation;
    private getPageContext;
    private getDefaultValue;
    private getMagnifiedValue;
    /**
     * @private
     */
    clear(): void;
}
