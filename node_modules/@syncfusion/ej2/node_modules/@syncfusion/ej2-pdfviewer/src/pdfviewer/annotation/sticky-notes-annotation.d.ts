import { PdfViewerBase, PdfViewer } from '../index';
/**
 * @hidden
 */
export interface IPopupAnnotation {
    shapeAnnotationType: string;
    pathData: string;
    author: string;
    subject: string;
    modifiedDate: string;
    note: string;
    bounds: any;
    color: any;
    opacity: number;
    state: string;
    stateModel: string;
    comments: ICommentsCollection[];
    review: IReviewCollection;
    annotName: string;
}
/**
 * @hidden
 */
export interface ICommentsCollection {
    author: string;
    modifiedDate: string;
    annotName: string;
    subject: string;
    parentId: string;
    note: string;
    state: string;
    stateModel: string;
    comments: ICommentsCollection[];
    review: IReviewCollection;
    shapeAnnotationType: string;
    position?: number;
}
/**
 * @hidden
 */
export interface IReviewCollection {
    author: string;
    state: string;
    stateModel: string;
    modifiedDate: string;
    annotId?: string;
}
/**
 * StickyNotes module
 */
export declare class StickyNotesAnnotation {
    private pdfViewer;
    private pdfViewerBase;
    private accordionContent;
    private accordionPageContainer;
    private accordionContentContainer;
    private commentsContainer;
    private commentMenuObj;
    private commentsCount;
    private commentsreplyCount;
    private commentContextMenu;
    private isAccordionContainer;
    private isSetAnnotationType;
    private isNewcommentAdded;
    private isCreateContextMenu;
    private commentsRequestHandler;
    /**
     * @private
     */
    isEditableElement: boolean;
    private author;
    /**
     * @private
     */
    accordionContainer: HTMLElement;
    /**
     * @private
     */
    mainContainer: HTMLElement;
    /**
     * @private
     */
    constructor(pdfViewer: PdfViewer, pdfViewerBase: PdfViewerBase);
    /**
     * @private
     */
    renderStickyNotesAnnotations(stickyAnnotations: any, pageNumber: number): void;
    /**
     * @private
     */
    drawStickyNotes(X: number, Y: number, width: number, height: number, pageIndex: number, annotation: any): any;
    /**
     * @private
     */
    createRequestForComments(): void;
    private renderAnnotationComments;
    /**
     * @private
     */
    initializeAcccordionContainer(): void;
    /**
     * @private
     */
    createPageAccordion(pageIndex: number): any;
    private alignAccordionContainer;
    /**
     * @private
     */
    updateCommentPanelScrollTop(pageNumber: number): void;
    /**
     * @private
     */
    createCommentControlPanel(data: any, pageIndex: number, type?: string, annotationSubType?: string): string;
    private commentDivFocus;
    private updateScrollPosition;
    private updateCommentsScrollTop;
    private createCommentDiv;
    private saveCommentDiv;
    private renderComments;
    /**
     * @private
     */
    createCommentsContainer(data: any, pageIndex: number, isCopy?: boolean): string;
    private modifyProperty;
    private createTitleContainer;
    private createReplyDivTitleContainer;
    private updateCommentIcon;
    private updateStatusContainer;
    /**
     * @private
     */
    updateAccordionContainer(removeDiv: HTMLElement): void;
    /**
     * @private
     */
    createCommentContextMenu(): void;
    private commentMenuItemSelect;
    private moreOptionsClick;
    private openTextEditor;
    private openEditorElement;
    private commentsDivClickEvent;
    private commentsDivDoubleClickEvent;
    private commentDivOnSelect;
    private commentDivMouseOver;
    private commentDivMouseLeave;
    /**
     * @private
     */
    drawIcons(event: any): void;
    /**
     * @private
     */
    addComments(annotationType: string, pageNumber: number, annotationSubType?: string): string;
    private commentsAnnotationSelect;
    private updateCommentsContainerWidth;
    private setAnnotationType;
    private modifyTextProperty;
    private modifyCommentsProperty;
    private modifyStatusProperty;
    private modifyCommentDeleteProperty;
    /**
     * @private
     */
    updateOpacityValue(annotation: any): void;
    /**
     * @private
     */
    undoAction(annotation: any, isAction: string, undoAnnotation?: any): any;
    /**
     * @private
     */
    redoAction(annotation: any, isAction: string, undoAnnotation?: any): any;
    private updateUndoRedoCollections;
    /**
     * @private
     */
    addAnnotationComments(pageIndex: any, type: string): void;
    /**
     * @private
     */
    findPosition(annotation: any, type: string, action?: string): any;
    private getAnnotations;
    private manageAnnotations;
    updateStickyNotes(annotation: any, id: any): any;
    saveStickyAnnotations(): any;
    private deleteStickyNotesAnnotations;
    addStickyNotesAnnotations(pageNumber: number, annotationBase: any): void;
    /**
     * @private
     */
    addTextToComments(annotName: string, text: string): void;
    /**
     * @private
     */
    updateAnnotationCollection(newAnnotation: any, annotation: any): void;
    private findAnnotationType;
    /**
     * @private
     */
    clear(): void;
    /**
     * @private
     */
    getModuleName(): string;
}
